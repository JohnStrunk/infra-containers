---
# yamllint disable rule:line-length
name: "CI Workflow"

env:
  IMAGE_PREFIX: ghcr.io/JohnStrunk/infra-

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
    tags: ["*"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches:
      - main
  workflow_dispatch:

jobs:
  pre-commit:
    name: "Pre-commit checks"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        # https://github.com/actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # https://github.com/hadolint/hadolint/issues/886#issuecomment-2043649041
      - name: Install hadolint
        run: |
          sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
          sudo chmod a+x /usr/local/bin/hadolint

      - name: Set up Python
        id: setup-py
        # https://github.com/actions/setup-python
        # yamllint disable-line rule:line-length
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"

      - name: Enable cache for pre-commit hooks
        # https://github.com/actions/cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/.cache/pre-commit
          # yamllint disable-line rule:line-length
          key: pre-commit|${{ steps.setup-py.outputs.python-version}}|${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit|${{ steps.setup-py.outputs.python-version}}|
            pre-commit|

      - name: Run pre-commit checks
        run: pipx run pre-commit run -a

      - name: Run pre-commit gc
        run: pipx run pre-commit gc

  # This job builds the devcontainer image, but doesn't do anything with it.
  # It's just here to make sure the image builds successfully.
  devcontainer:
    name: "Build devcontainer image"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        # https://github.com/actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        # https://github.com/docker/setup-buildx-action
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        id: setup-buildx

      - name: Expose variables required for actions cache
        # https://github.com/crazy-max/ghaction-github-runtime
        uses: crazy-max/ghaction-github-runtime@3cb05d89e1f492524af3d41a1c98c83bc3025124 # v3.1.0

      - name: Build devcontainer
        run: npx -- @devcontainers/cli build --workspace-folder . --cache-from type=gha,scope=devcontainer --cache-to type=gha,mode=min,scope=devcontainer

  containers:
    name: "Build image"
    strategy:
      matrix:
        image:
          - deployer
          - restic-pruner
          - upnp-forwarder
    needs: [pre-commit]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        # https://github.com/actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        # https://github.com/docker/setup-buildx-action
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        id: setup-buildx

      - name: Login to GitHub Container Registry
        # https://github.com/docker/login-action
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set container metadata
        # https://github.com/docker/metadata-action
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        id: meta
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: index,manifest
        with:
          annotations: |
            org.opencontainers.image.title=${{ matrix.image }}
          images: ${{ env.IMAGE_PREFIX }}${{ matrix.image }}
          labels: |
            org.opencontainers.image.title=${{ matrix.image }}
          # semver lines are for mapping git tags to container tags
          #   v1.2.3 -> 1.2.3, 1.2, 1
          # type=raw sets 'latest' to match the most recent commit on main
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: push
        # https://github.com/docker/build-push-action
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          annotations: ${{ steps.meta.outputs.annotations }}
          context: ./${{ matrix.image }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=container-${{ matrix.image }}
          cache-to: type=gha,mode=max,scope=container-${{ matrix.image }}


  # This is a dummy job to determine success of the CI workflow
  ci-success:
    name: CI Workflow - Success
    needs:
      - containers
      - devcontainer
      - pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Success
        run: echo "Previous jobs were successful"
